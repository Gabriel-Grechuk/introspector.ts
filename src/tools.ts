import fs from "fs";
import * as logging from "./logging";

export function singularizeString(word: string): string {
  const endings: Record<string, string> = {
    ves: "fe",
    ies: "y",
    i: "us",
    zes: "ze",
    ses: "s",
    es: "e",
    s: "",
  };
  return word.replace(
    new RegExp(`(${Object.keys(endings).join("|")})$`),
    (r) => endings[r]!,
  );
}

export function snakeToPascal(str: string): string {
  const snakeToCamel = (str: string) =>
    str.replace(/([-_]\w)/g, (g) => g[1]!.toUpperCase());
  let camelCase = snakeToCamel(str);
  let pascalCase = camelCase[0]!.toUpperCase() + camelCase.substring(1);

  return pascalCase;
}

export function genFileText(
  data: Record<string, Record<string, string>>,
): string {
  let text = `// This file was generated by introspector.ts!
`;

  for (const table of Object.keys(data)) {
    let interfaceFields = "";
    for (const field of Object.keys(data[table]!)) {
      interfaceFields += `  ${field}: ${data[table]![field]};\n`;
    }
    text += `
export interface ${singularizeString(snakeToPascal(table))} {
${interfaceFields}}
`;
  }

  return text;
}

export function writeFile(path: string, content: string): void {
  logging.infoLog("Writing file:", path);
  fs.writeFileSync(path, content);
}
